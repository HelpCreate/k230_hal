/* automatically generated by rust-bindgen 0.69.4 */
use core::option;

pub const GPIO_MAX_NUM: u32 = 72;
pub const IRQN_GPIO0_INTERRUPT: u32 = 32;
pub const DATA_OUTPUT: u32 = 0;
pub const DIRECTION: u32 = 4;
pub const DATA_SOURCE: u32 = 8;
pub const INT_ENABLE: u32 = 48;
pub const INT_MASK: u32 = 52;
pub const INT_TYPE_LEVEL: u32 = 56;
pub const INT_POLARITY: u32 = 60;
pub const INT_STATUS: u32 = 64;
pub const INT_STATUS_RAW: u32 = 68;
pub const INT_DEBOUNCE: u32 = 72;
pub const INT_CLEAR: u32 = 76;
pub const DATA_INPUT: u32 = 80;
pub const VER_ID_CODE: u32 = 100;
pub const INT_BOTHEDGE: u32 = 104;
pub const DATA_INPUT_STRIDE: u32 = 4;
pub const DATA_OUTPUT_STRIDE: u32 = 12;
pub const DIRECTION_STRIDE: u32 = 12;
pub const KD_GPIO_HIGH: u32 = 1;
pub const KD_GPIO_LOW: u32 = 0;
pub const KD_GPIO_IRQ_DISABLE: u32 = 0;
pub const KD_GPIO_IRQ_ENABLE: u32 = 1;
pub type rt_err_t = cty::c_int;
pub type rt_base_t = cty::c_int;
pub type rt_uint32_t = cty::c_uint;
pub type rt_int32_t = cty::c_int;
pub const _gpio_pin_edge_GPIO_PE_RISING: _gpio_pin_edge = 0;
pub const _gpio_pin_edge_GPIO_PE_FALLING: _gpio_pin_edge = 1;
pub const _gpio_pin_edge_GPIO_PE_BOTH: _gpio_pin_edge = 2;
pub const _gpio_pin_edge_GPIO_PE_HIGH: _gpio_pin_edge = 3;
pub const _gpio_pin_edge_GPIO_PE_LOW: _gpio_pin_edge = 4;
pub type _gpio_pin_edge = cty::c_uint;
pub use self::_gpio_pin_edge as gpio_pin_edge_t;
pub const _gpio_drive_mode_GPIO_DM_OUTPUT: _gpio_drive_mode = 0;
pub const _gpio_drive_mode_GPIO_DM_INPUT: _gpio_drive_mode = 1;
pub const _gpio_drive_mode_GPIO_DM_INPUT_PULL_UP: _gpio_drive_mode = 2;
pub const _gpio_drive_mode_GPIO_DM_INPUT_PULL_DOWN: _gpio_drive_mode = 3;
pub type _gpio_drive_mode = cty::c_uint;
pub use self::_gpio_drive_mode as gpio_drive_mode_t;
pub const _gpio_pin_value_GPIO_PV_LOW: _gpio_pin_value = 0;
pub const _gpio_pin_value_GPIO_PV_HIGH: _gpio_pin_value = 1;
pub type _gpio_pin_value = cty::c_uint;
pub use self::_gpio_pin_value as gpio_pin_value_t;
extern "C" {
    pub fn rt_hw_pin_init() -> cty::c_int;
}
extern "C" {
    pub fn kd_pin_irq_enable(pin: rt_base_t, enabled: rt_uint32_t) -> rt_err_t;
}
extern "C" {
    pub fn kd_pin_detach_irq(pin: rt_int32_t) -> rt_err_t;
}
extern "C" {
    pub fn kd_pin_attach_irq(
        pin: rt_int32_t,
        mode: rt_uint32_t,
        hdr: option::Option<unsafe extern "C" fn(args: *mut cty::c_void)>,
        args: *mut cty::c_void,
    ) -> rt_err_t;
}
extern "C" {
    pub fn kd_pin_write(pin: rt_base_t, value: rt_base_t);
}
extern "C" {
    pub fn kd_pin_mode(pin: rt_base_t, mode: rt_base_t);
}
extern "C" {
    pub fn kd_pin_read(pin: rt_base_t) -> cty::c_int;
}
